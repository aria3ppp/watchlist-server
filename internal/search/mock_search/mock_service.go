// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aria3ppp/watchlist-server/internal/search (interfaces: Service)

// Package mock_search is a generated GoMock package.
package mock_search

import (
	context "context"
	reflect "reflect"

	models "github.com/aria3ppp/watchlist-server/internal/models"
	query "github.com/aria3ppp/watchlist-server/internal/query"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// SearchMovies mocks base method.
func (m *MockService) SearchMovies(arg0 context.Context, arg1 query.SearchOptions) ([]*models.Film, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", arg0, arg1)
	ret0, _ := ret[0].([]*models.Film)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockServiceMockRecorder) SearchMovies(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockService)(nil).SearchMovies), arg0, arg1)
}

// SearchSerieses mocks base method.
func (m *MockService) SearchSerieses(arg0 context.Context, arg1 query.SearchOptions) ([]*models.Series, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchSerieses", arg0, arg1)
	ret0, _ := ret[0].([]*models.Series)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchSerieses indicates an expected call of SearchSerieses.
func (mr *MockServiceMockRecorder) SearchSerieses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchSerieses", reflect.TypeOf((*MockService)(nil).SearchSerieses), arg0, arg1)
}
