// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSeriesesAudits(t *testing.T) {
	t.Parallel()

	query := SeriesesAudits()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSeriesesAuditsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SeriesesAudits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeriesesAuditsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SeriesesAudits().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SeriesesAudits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeriesesAuditsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeriesesAuditSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SeriesesAudits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSeriesesAuditsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SeriesesAuditExists(ctx, tx, o.ID, o.ContributedBy, o.ContributedAt)
	if err != nil {
		t.Errorf("Unable to check if SeriesesAudit exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SeriesesAuditExists to return true, but got false.")
	}
}

func testSeriesesAuditsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	seriesesAuditFound, err := FindSeriesesAudit(ctx, tx, o.ID, o.ContributedBy, o.ContributedAt)
	if err != nil {
		t.Error(err)
	}

	if seriesesAuditFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSeriesesAuditsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SeriesesAudits().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSeriesesAuditsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SeriesesAudits().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSeriesesAuditsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	seriesesAuditOne := &SeriesesAudit{}
	seriesesAuditTwo := &SeriesesAudit{}
	if err = randomize.Struct(seed, seriesesAuditOne, seriesesAuditDBTypes, false, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}
	if err = randomize.Struct(seed, seriesesAuditTwo, seriesesAuditDBTypes, false, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = seriesesAuditOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seriesesAuditTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SeriesesAudits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSeriesesAuditsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	seriesesAuditOne := &SeriesesAudit{}
	seriesesAuditTwo := &SeriesesAudit{}
	if err = randomize.Struct(seed, seriesesAuditOne, seriesesAuditDBTypes, false, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}
	if err = randomize.Struct(seed, seriesesAuditTwo, seriesesAuditDBTypes, false, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = seriesesAuditOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = seriesesAuditTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeriesesAudits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func seriesesAuditBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *SeriesesAudit) error {
	*o = SeriesesAudit{}
	return nil
}

func seriesesAuditAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *SeriesesAudit) error {
	*o = SeriesesAudit{}
	return nil
}

func seriesesAuditAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *SeriesesAudit) error {
	*o = SeriesesAudit{}
	return nil
}

func seriesesAuditBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SeriesesAudit) error {
	*o = SeriesesAudit{}
	return nil
}

func seriesesAuditAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *SeriesesAudit) error {
	*o = SeriesesAudit{}
	return nil
}

func seriesesAuditBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SeriesesAudit) error {
	*o = SeriesesAudit{}
	return nil
}

func seriesesAuditAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *SeriesesAudit) error {
	*o = SeriesesAudit{}
	return nil
}

func seriesesAuditBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SeriesesAudit) error {
	*o = SeriesesAudit{}
	return nil
}

func seriesesAuditAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *SeriesesAudit) error {
	*o = SeriesesAudit{}
	return nil
}

func testSeriesesAuditsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &SeriesesAudit{}
	o := &SeriesesAudit{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, false); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit object: %s", err)
	}

	AddSeriesesAuditHook(boil.BeforeInsertHook, seriesesAuditBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	seriesesAuditBeforeInsertHooks = []SeriesesAuditHook{}

	AddSeriesesAuditHook(boil.AfterInsertHook, seriesesAuditAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	seriesesAuditAfterInsertHooks = []SeriesesAuditHook{}

	AddSeriesesAuditHook(boil.AfterSelectHook, seriesesAuditAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	seriesesAuditAfterSelectHooks = []SeriesesAuditHook{}

	AddSeriesesAuditHook(boil.BeforeUpdateHook, seriesesAuditBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	seriesesAuditBeforeUpdateHooks = []SeriesesAuditHook{}

	AddSeriesesAuditHook(boil.AfterUpdateHook, seriesesAuditAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	seriesesAuditAfterUpdateHooks = []SeriesesAuditHook{}

	AddSeriesesAuditHook(boil.BeforeDeleteHook, seriesesAuditBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	seriesesAuditBeforeDeleteHooks = []SeriesesAuditHook{}

	AddSeriesesAuditHook(boil.AfterDeleteHook, seriesesAuditAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	seriesesAuditAfterDeleteHooks = []SeriesesAuditHook{}

	AddSeriesesAuditHook(boil.BeforeUpsertHook, seriesesAuditBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	seriesesAuditBeforeUpsertHooks = []SeriesesAuditHook{}

	AddSeriesesAuditHook(boil.AfterUpsertHook, seriesesAuditAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	seriesesAuditAfterUpsertHooks = []SeriesesAuditHook{}
}

func testSeriesesAuditsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeriesesAudits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeriesesAuditsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(seriesesAuditColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SeriesesAudits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSeriesesAuditsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSeriesesAuditsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SeriesesAuditSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSeriesesAuditsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SeriesesAudits().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	seriesesAuditDBTypes = map[string]string{`ID`: `integer`, `Title`: `character varying`, `Descriptions`: `character varying`, `DateStarted`: `date`, `DateEnded`: `date`, `Poster`: `character varying`, `ContributedBy`: `integer`, `ContributedAt`: `timestamp with time zone`, `Invalidation`: `character varying`}
	_                    = bytes.MinRead
)

func testSeriesesAuditsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(seriesesAuditPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(seriesesAuditAllColumns) == len(seriesesAuditPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeriesesAudits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSeriesesAuditsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(seriesesAuditAllColumns) == len(seriesesAuditPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SeriesesAudit{}
	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SeriesesAudits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, seriesesAuditDBTypes, true, seriesesAuditPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(seriesesAuditAllColumns, seriesesAuditPrimaryKeyColumns) {
		fields = seriesesAuditAllColumns
	} else {
		fields = strmangle.SetComplement(
			seriesesAuditAllColumns,
			seriesesAuditPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SeriesesAuditSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSeriesesAuditsUpsert(t *testing.T) {
	t.Parallel()

	if len(seriesesAuditAllColumns) == len(seriesesAuditPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SeriesesAudit{}
	if err = randomize.Struct(seed, &o, seriesesAuditDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SeriesesAudit: %s", err)
	}

	count, err := SeriesesAudits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, seriesesAuditDBTypes, false, seriesesAuditPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SeriesesAudit struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SeriesesAudit: %s", err)
	}

	count, err = SeriesesAudits().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
