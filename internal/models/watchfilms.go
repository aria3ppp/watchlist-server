// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Watchfilm is an object representing the database table.
type Watchfilm struct {
	ID          int       `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID      int       `db:"-" boil:"user_id" json:"-" toml:"-" yaml:"-"`
	FilmID      int       `db:"-" boil:"film_id" json:"-" toml:"-" yaml:"-"`
	TimeAdded   time.Time `db:"time_added" boil:"time_added" json:"time_added" toml:"time_added" yaml:"time_added"`
	TimeWatched null.Time `db:"time_watched" boil:"time_watched" json:"time_watched,omitempty" toml:"time_watched" yaml:"time_watched,omitempty"`

	R *watchfilmR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L watchfilmL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WatchfilmColumns = struct {
	ID          string
	UserID      string
	FilmID      string
	TimeAdded   string
	TimeWatched string
}{
	ID:          "id",
	UserID:      "user_id",
	FilmID:      "film_id",
	TimeAdded:   "time_added",
	TimeWatched: "time_watched",
}

var WatchfilmTableColumns = struct {
	ID          string
	UserID      string
	FilmID      string
	TimeAdded   string
	TimeWatched string
}{
	ID:          "watchfilms.id",
	UserID:      "watchfilms.user_id",
	FilmID:      "watchfilms.film_id",
	TimeAdded:   "watchfilms.time_added",
	TimeWatched: "watchfilms.time_watched",
}

// Generated where

var WatchfilmWhere = struct {
	ID          whereHelperint
	UserID      whereHelperint
	FilmID      whereHelperint
	TimeAdded   whereHelpertime_Time
	TimeWatched whereHelpernull_Time
}{
	ID:          whereHelperint{field: "\"watchfilms\".\"id\""},
	UserID:      whereHelperint{field: "\"watchfilms\".\"user_id\""},
	FilmID:      whereHelperint{field: "\"watchfilms\".\"film_id\""},
	TimeAdded:   whereHelpertime_Time{field: "\"watchfilms\".\"time_added\""},
	TimeWatched: whereHelpernull_Time{field: "\"watchfilms\".\"time_watched\""},
}

// WatchfilmRels is where relationship names are stored.
var WatchfilmRels = struct {
	Film string
	User string
}{
	Film: "Film",
	User: "User",
}

// watchfilmR is where relationships are stored.
type watchfilmR struct {
	Film *Film `db:"Film" boil:"Film" json:"Film" toml:"Film" yaml:"Film"`
	User *User `db:"User" boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*watchfilmR) NewStruct() *watchfilmR {
	return &watchfilmR{}
}

func (r *watchfilmR) GetFilm() *Film {
	if r == nil {
		return nil
	}
	return r.Film
}

func (r *watchfilmR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// watchfilmL is where Load methods for each relationship are stored.
type watchfilmL struct{}

var (
	watchfilmAllColumns            = []string{"id", "user_id", "film_id", "time_added", "time_watched"}
	watchfilmColumnsWithoutDefault = []string{"user_id", "film_id"}
	watchfilmColumnsWithDefault    = []string{"id", "time_added", "time_watched"}
	watchfilmPrimaryKeyColumns     = []string{"id"}
	watchfilmGeneratedColumns      = []string{}
)

type (
	// WatchfilmSlice is an alias for a slice of pointers to Watchfilm.
	// This should almost always be used instead of []Watchfilm.
	WatchfilmSlice []*Watchfilm
	// WatchfilmHook is the signature for custom Watchfilm hook methods
	WatchfilmHook func(context.Context, boil.ContextExecutor, *Watchfilm) error

	watchfilmQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	watchfilmType                 = reflect.TypeOf(&Watchfilm{})
	watchfilmMapping              = queries.MakeStructMapping(watchfilmType)
	watchfilmPrimaryKeyMapping, _ = queries.BindMapping(watchfilmType, watchfilmMapping, watchfilmPrimaryKeyColumns)
	watchfilmInsertCacheMut       sync.RWMutex
	watchfilmInsertCache          = make(map[string]insertCache)
	watchfilmUpdateCacheMut       sync.RWMutex
	watchfilmUpdateCache          = make(map[string]updateCache)
	watchfilmUpsertCacheMut       sync.RWMutex
	watchfilmUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var watchfilmAfterSelectHooks []WatchfilmHook

var watchfilmBeforeInsertHooks []WatchfilmHook
var watchfilmAfterInsertHooks []WatchfilmHook

var watchfilmBeforeUpdateHooks []WatchfilmHook
var watchfilmAfterUpdateHooks []WatchfilmHook

var watchfilmBeforeDeleteHooks []WatchfilmHook
var watchfilmAfterDeleteHooks []WatchfilmHook

var watchfilmBeforeUpsertHooks []WatchfilmHook
var watchfilmAfterUpsertHooks []WatchfilmHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Watchfilm) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchfilmAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Watchfilm) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchfilmBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Watchfilm) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchfilmAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Watchfilm) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchfilmBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Watchfilm) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchfilmAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Watchfilm) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchfilmBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Watchfilm) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchfilmAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Watchfilm) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchfilmBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Watchfilm) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range watchfilmAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWatchfilmHook registers your hook function for all future operations.
func AddWatchfilmHook(hookPoint boil.HookPoint, watchfilmHook WatchfilmHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		watchfilmAfterSelectHooks = append(watchfilmAfterSelectHooks, watchfilmHook)
	case boil.BeforeInsertHook:
		watchfilmBeforeInsertHooks = append(watchfilmBeforeInsertHooks, watchfilmHook)
	case boil.AfterInsertHook:
		watchfilmAfterInsertHooks = append(watchfilmAfterInsertHooks, watchfilmHook)
	case boil.BeforeUpdateHook:
		watchfilmBeforeUpdateHooks = append(watchfilmBeforeUpdateHooks, watchfilmHook)
	case boil.AfterUpdateHook:
		watchfilmAfterUpdateHooks = append(watchfilmAfterUpdateHooks, watchfilmHook)
	case boil.BeforeDeleteHook:
		watchfilmBeforeDeleteHooks = append(watchfilmBeforeDeleteHooks, watchfilmHook)
	case boil.AfterDeleteHook:
		watchfilmAfterDeleteHooks = append(watchfilmAfterDeleteHooks, watchfilmHook)
	case boil.BeforeUpsertHook:
		watchfilmBeforeUpsertHooks = append(watchfilmBeforeUpsertHooks, watchfilmHook)
	case boil.AfterUpsertHook:
		watchfilmAfterUpsertHooks = append(watchfilmAfterUpsertHooks, watchfilmHook)
	}
}

// One returns a single watchfilm record from the query.
func (q watchfilmQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Watchfilm, error) {
	o := &Watchfilm{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for watchfilms")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Watchfilm records from the query.
func (q watchfilmQuery) All(ctx context.Context, exec boil.ContextExecutor) (WatchfilmSlice, error) {
	var o []*Watchfilm

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Watchfilm slice")
	}

	if len(watchfilmAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Watchfilm records in the query.
func (q watchfilmQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count watchfilms rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q watchfilmQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if watchfilms exists")
	}

	return count > 0, nil
}

// Film pointed to by the foreign key.
func (o *Watchfilm) Film(mods ...qm.QueryMod) filmQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FilmID),
	}

	queryMods = append(queryMods, mods...)

	return Films(queryMods...)
}

// User pointed to by the foreign key.
func (o *Watchfilm) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadFilm allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (watchfilmL) LoadFilm(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWatchfilm interface{}, mods queries.Applicator) error {
	var slice []*Watchfilm
	var object *Watchfilm

	if singular {
		var ok bool
		object, ok = maybeWatchfilm.(*Watchfilm)
		if !ok {
			object = new(Watchfilm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWatchfilm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWatchfilm))
			}
		}
	} else {
		s, ok := maybeWatchfilm.(*[]*Watchfilm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWatchfilm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWatchfilm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &watchfilmR{}
		}
		args = append(args, object.FilmID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &watchfilmR{}
			}

			for _, a := range args {
				if a == obj.FilmID {
					continue Outer
				}
			}

			args = append(args, obj.FilmID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`films`),
		qm.WhereIn(`films.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Film")
	}

	var resultSlice []*Film
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Film")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for films")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for films")
	}

	if len(watchfilmAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Film = foreign
		if foreign.R == nil {
			foreign.R = &filmR{}
		}
		foreign.R.Watchfilms = append(foreign.R.Watchfilms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.FilmID == foreign.ID {
				local.R.Film = foreign
				if foreign.R == nil {
					foreign.R = &filmR{}
				}
				foreign.R.Watchfilms = append(foreign.R.Watchfilms, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (watchfilmL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWatchfilm interface{}, mods queries.Applicator) error {
	var slice []*Watchfilm
	var object *Watchfilm

	if singular {
		var ok bool
		object, ok = maybeWatchfilm.(*Watchfilm)
		if !ok {
			object = new(Watchfilm)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeWatchfilm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeWatchfilm))
			}
		}
	} else {
		s, ok := maybeWatchfilm.(*[]*Watchfilm)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeWatchfilm)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeWatchfilm))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &watchfilmR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &watchfilmR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(watchfilmAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Watchfilms = append(foreign.R.Watchfilms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Watchfilms = append(foreign.R.Watchfilms, local)
				break
			}
		}
	}

	return nil
}

// SetFilm of the watchfilm to the related item.
// Sets o.R.Film to related.
// Adds o to related.R.Watchfilms.
func (o *Watchfilm) SetFilm(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Film) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"watchfilms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"film_id"}),
		strmangle.WhereClause("\"", "\"", 2, watchfilmPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.FilmID = related.ID
	if o.R == nil {
		o.R = &watchfilmR{
			Film: related,
		}
	} else {
		o.R.Film = related
	}

	if related.R == nil {
		related.R = &filmR{
			Watchfilms: WatchfilmSlice{o},
		}
	} else {
		related.R.Watchfilms = append(related.R.Watchfilms, o)
	}

	return nil
}

// SetUser of the watchfilm to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Watchfilms.
func (o *Watchfilm) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"watchfilms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, watchfilmPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &watchfilmR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Watchfilms: WatchfilmSlice{o},
		}
	} else {
		related.R.Watchfilms = append(related.R.Watchfilms, o)
	}

	return nil
}

// Watchfilms retrieves all the records using an executor.
func Watchfilms(mods ...qm.QueryMod) watchfilmQuery {
	mods = append(mods, qm.From("\"watchfilms\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"watchfilms\".*"})
	}

	return watchfilmQuery{q}
}

// FindWatchfilm retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWatchfilm(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Watchfilm, error) {
	watchfilmObj := &Watchfilm{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"watchfilms\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, watchfilmObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from watchfilms")
	}

	if err = watchfilmObj.doAfterSelectHooks(ctx, exec); err != nil {
		return watchfilmObj, err
	}

	return watchfilmObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Watchfilm) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no watchfilms provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(watchfilmColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	watchfilmInsertCacheMut.RLock()
	cache, cached := watchfilmInsertCache[key]
	watchfilmInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			watchfilmAllColumns,
			watchfilmColumnsWithDefault,
			watchfilmColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(watchfilmType, watchfilmMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(watchfilmType, watchfilmMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"watchfilms\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"watchfilms\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into watchfilms")
	}

	if !cached {
		watchfilmInsertCacheMut.Lock()
		watchfilmInsertCache[key] = cache
		watchfilmInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Watchfilm.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Watchfilm) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	watchfilmUpdateCacheMut.RLock()
	cache, cached := watchfilmUpdateCache[key]
	watchfilmUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			watchfilmAllColumns,
			watchfilmPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update watchfilms, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"watchfilms\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, watchfilmPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(watchfilmType, watchfilmMapping, append(wl, watchfilmPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update watchfilms row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for watchfilms")
	}

	if !cached {
		watchfilmUpdateCacheMut.Lock()
		watchfilmUpdateCache[key] = cache
		watchfilmUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q watchfilmQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for watchfilms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for watchfilms")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WatchfilmSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), watchfilmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"watchfilms\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, watchfilmPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in watchfilm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all watchfilm")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Watchfilm) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no watchfilms provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(watchfilmColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	watchfilmUpsertCacheMut.RLock()
	cache, cached := watchfilmUpsertCache[key]
	watchfilmUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			watchfilmAllColumns,
			watchfilmColumnsWithDefault,
			watchfilmColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			watchfilmAllColumns,
			watchfilmPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert watchfilms, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(watchfilmPrimaryKeyColumns))
			copy(conflict, watchfilmPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"watchfilms\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(watchfilmType, watchfilmMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(watchfilmType, watchfilmMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert watchfilms")
	}

	if !cached {
		watchfilmUpsertCacheMut.Lock()
		watchfilmUpsertCache[key] = cache
		watchfilmUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Watchfilm record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Watchfilm) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Watchfilm provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), watchfilmPrimaryKeyMapping)
	sql := "DELETE FROM \"watchfilms\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from watchfilms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for watchfilms")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q watchfilmQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no watchfilmQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from watchfilms")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for watchfilms")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WatchfilmSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(watchfilmBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), watchfilmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"watchfilms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, watchfilmPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from watchfilm slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for watchfilms")
	}

	if len(watchfilmAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Watchfilm) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWatchfilm(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WatchfilmSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WatchfilmSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), watchfilmPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"watchfilms\".* FROM \"watchfilms\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, watchfilmPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WatchfilmSlice")
	}

	*o = slice

	return nil
}

// WatchfilmExists checks if the Watchfilm row exists.
func WatchfilmExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"watchfilms\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if watchfilms exists")
	}

	return exists, nil
}
