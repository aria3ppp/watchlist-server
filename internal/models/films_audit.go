// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FilmsAudit is an object representing the database table.
type FilmsAudit struct {
	ID            int         `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Title         string      `db:"title" boil:"title" json:"title" toml:"title" yaml:"title"`
	Descriptions  null.String `db:"descriptions" boil:"descriptions" json:"descriptions,omitempty" toml:"descriptions" yaml:"descriptions,omitempty"`
	DateReleased  time.Time   `db:"date_released" boil:"date_released" json:"date_released" toml:"date_released" yaml:"date_released"`
	Duration      null.Int    `db:"duration" boil:"duration" json:"duration,omitempty" toml:"duration" yaml:"duration,omitempty"`
	SeriesID      null.Int    `db:"series_id" boil:"series_id" json:"series_id,omitempty" toml:"series_id" yaml:"series_id,omitempty"`
	SeasonNumber  null.Int    `db:"season_number" boil:"season_number" json:"season_number,omitempty" toml:"season_number" yaml:"season_number,omitempty"`
	EpisodeNumber null.Int    `db:"episode_number" boil:"episode_number" json:"episode_number,omitempty" toml:"episode_number" yaml:"episode_number,omitempty"`
	Poster        null.String `db:"poster" boil:"poster" json:"poster,omitempty" toml:"poster" yaml:"poster,omitempty"`
	ContributedBy int         `db:"contributed_by" boil:"contributed_by" json:"contributed_by" toml:"contributed_by" yaml:"contributed_by"`
	ContributedAt time.Time   `db:"contributed_at" boil:"contributed_at" json:"contributed_at" toml:"contributed_at" yaml:"contributed_at"`
	Invalidation  null.String `db:"invalidation" boil:"invalidation" json:"invalidation,omitempty" toml:"invalidation" yaml:"invalidation,omitempty"`

	R *filmsAuditR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L filmsAuditL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FilmsAuditColumns = struct {
	ID            string
	Title         string
	Descriptions  string
	DateReleased  string
	Duration      string
	SeriesID      string
	SeasonNumber  string
	EpisodeNumber string
	Poster        string
	ContributedBy string
	ContributedAt string
	Invalidation  string
}{
	ID:            "id",
	Title:         "title",
	Descriptions:  "descriptions",
	DateReleased:  "date_released",
	Duration:      "duration",
	SeriesID:      "series_id",
	SeasonNumber:  "season_number",
	EpisodeNumber: "episode_number",
	Poster:        "poster",
	ContributedBy: "contributed_by",
	ContributedAt: "contributed_at",
	Invalidation:  "invalidation",
}

var FilmsAuditTableColumns = struct {
	ID            string
	Title         string
	Descriptions  string
	DateReleased  string
	Duration      string
	SeriesID      string
	SeasonNumber  string
	EpisodeNumber string
	Poster        string
	ContributedBy string
	ContributedAt string
	Invalidation  string
}{
	ID:            "films_audit.id",
	Title:         "films_audit.title",
	Descriptions:  "films_audit.descriptions",
	DateReleased:  "films_audit.date_released",
	Duration:      "films_audit.duration",
	SeriesID:      "films_audit.series_id",
	SeasonNumber:  "films_audit.season_number",
	EpisodeNumber: "films_audit.episode_number",
	Poster:        "films_audit.poster",
	ContributedBy: "films_audit.contributed_by",
	ContributedAt: "films_audit.contributed_at",
	Invalidation:  "films_audit.invalidation",
}

// Generated where

var FilmsAuditWhere = struct {
	ID            whereHelperint
	Title         whereHelperstring
	Descriptions  whereHelpernull_String
	DateReleased  whereHelpertime_Time
	Duration      whereHelpernull_Int
	SeriesID      whereHelpernull_Int
	SeasonNumber  whereHelpernull_Int
	EpisodeNumber whereHelpernull_Int
	Poster        whereHelpernull_String
	ContributedBy whereHelperint
	ContributedAt whereHelpertime_Time
	Invalidation  whereHelpernull_String
}{
	ID:            whereHelperint{field: "\"films_audit\".\"id\""},
	Title:         whereHelperstring{field: "\"films_audit\".\"title\""},
	Descriptions:  whereHelpernull_String{field: "\"films_audit\".\"descriptions\""},
	DateReleased:  whereHelpertime_Time{field: "\"films_audit\".\"date_released\""},
	Duration:      whereHelpernull_Int{field: "\"films_audit\".\"duration\""},
	SeriesID:      whereHelpernull_Int{field: "\"films_audit\".\"series_id\""},
	SeasonNumber:  whereHelpernull_Int{field: "\"films_audit\".\"season_number\""},
	EpisodeNumber: whereHelpernull_Int{field: "\"films_audit\".\"episode_number\""},
	Poster:        whereHelpernull_String{field: "\"films_audit\".\"poster\""},
	ContributedBy: whereHelperint{field: "\"films_audit\".\"contributed_by\""},
	ContributedAt: whereHelpertime_Time{field: "\"films_audit\".\"contributed_at\""},
	Invalidation:  whereHelpernull_String{field: "\"films_audit\".\"invalidation\""},
}

// FilmsAuditRels is where relationship names are stored.
var FilmsAuditRels = struct {
}{}

// filmsAuditR is where relationships are stored.
type filmsAuditR struct {
}

// NewStruct creates a new relationship struct
func (*filmsAuditR) NewStruct() *filmsAuditR {
	return &filmsAuditR{}
}

// filmsAuditL is where Load methods for each relationship are stored.
type filmsAuditL struct{}

var (
	filmsAuditAllColumns            = []string{"id", "title", "descriptions", "date_released", "duration", "series_id", "season_number", "episode_number", "poster", "contributed_by", "contributed_at", "invalidation"}
	filmsAuditColumnsWithoutDefault = []string{"id", "title", "date_released", "contributed_by", "contributed_at"}
	filmsAuditColumnsWithDefault    = []string{"descriptions", "duration", "series_id", "season_number", "episode_number", "poster", "invalidation"}
	filmsAuditPrimaryKeyColumns     = []string{"id", "contributed_by", "contributed_at"}
	filmsAuditGeneratedColumns      = []string{}
)

type (
	// FilmsAuditSlice is an alias for a slice of pointers to FilmsAudit.
	// This should almost always be used instead of []FilmsAudit.
	FilmsAuditSlice []*FilmsAudit
	// FilmsAuditHook is the signature for custom FilmsAudit hook methods
	FilmsAuditHook func(context.Context, boil.ContextExecutor, *FilmsAudit) error

	filmsAuditQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	filmsAuditType                 = reflect.TypeOf(&FilmsAudit{})
	filmsAuditMapping              = queries.MakeStructMapping(filmsAuditType)
	filmsAuditPrimaryKeyMapping, _ = queries.BindMapping(filmsAuditType, filmsAuditMapping, filmsAuditPrimaryKeyColumns)
	filmsAuditInsertCacheMut       sync.RWMutex
	filmsAuditInsertCache          = make(map[string]insertCache)
	filmsAuditUpdateCacheMut       sync.RWMutex
	filmsAuditUpdateCache          = make(map[string]updateCache)
	filmsAuditUpsertCacheMut       sync.RWMutex
	filmsAuditUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var filmsAuditAfterSelectHooks []FilmsAuditHook

var filmsAuditBeforeInsertHooks []FilmsAuditHook
var filmsAuditAfterInsertHooks []FilmsAuditHook

var filmsAuditBeforeUpdateHooks []FilmsAuditHook
var filmsAuditAfterUpdateHooks []FilmsAuditHook

var filmsAuditBeforeDeleteHooks []FilmsAuditHook
var filmsAuditAfterDeleteHooks []FilmsAuditHook

var filmsAuditBeforeUpsertHooks []FilmsAuditHook
var filmsAuditAfterUpsertHooks []FilmsAuditHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FilmsAudit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmsAuditAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FilmsAudit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmsAuditBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FilmsAudit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmsAuditAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FilmsAudit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmsAuditBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FilmsAudit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmsAuditAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FilmsAudit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmsAuditBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FilmsAudit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmsAuditAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FilmsAudit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmsAuditBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FilmsAudit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range filmsAuditAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFilmsAuditHook registers your hook function for all future operations.
func AddFilmsAuditHook(hookPoint boil.HookPoint, filmsAuditHook FilmsAuditHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		filmsAuditAfterSelectHooks = append(filmsAuditAfterSelectHooks, filmsAuditHook)
	case boil.BeforeInsertHook:
		filmsAuditBeforeInsertHooks = append(filmsAuditBeforeInsertHooks, filmsAuditHook)
	case boil.AfterInsertHook:
		filmsAuditAfterInsertHooks = append(filmsAuditAfterInsertHooks, filmsAuditHook)
	case boil.BeforeUpdateHook:
		filmsAuditBeforeUpdateHooks = append(filmsAuditBeforeUpdateHooks, filmsAuditHook)
	case boil.AfterUpdateHook:
		filmsAuditAfterUpdateHooks = append(filmsAuditAfterUpdateHooks, filmsAuditHook)
	case boil.BeforeDeleteHook:
		filmsAuditBeforeDeleteHooks = append(filmsAuditBeforeDeleteHooks, filmsAuditHook)
	case boil.AfterDeleteHook:
		filmsAuditAfterDeleteHooks = append(filmsAuditAfterDeleteHooks, filmsAuditHook)
	case boil.BeforeUpsertHook:
		filmsAuditBeforeUpsertHooks = append(filmsAuditBeforeUpsertHooks, filmsAuditHook)
	case boil.AfterUpsertHook:
		filmsAuditAfterUpsertHooks = append(filmsAuditAfterUpsertHooks, filmsAuditHook)
	}
}

// One returns a single filmsAudit record from the query.
func (q filmsAuditQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FilmsAudit, error) {
	o := &FilmsAudit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for films_audit")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all FilmsAudit records from the query.
func (q filmsAuditQuery) All(ctx context.Context, exec boil.ContextExecutor) (FilmsAuditSlice, error) {
	var o []*FilmsAudit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to FilmsAudit slice")
	}

	if len(filmsAuditAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all FilmsAudit records in the query.
func (q filmsAuditQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count films_audit rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q filmsAuditQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if films_audit exists")
	}

	return count > 0, nil
}

// FilmsAudits retrieves all the records using an executor.
func FilmsAudits(mods ...qm.QueryMod) filmsAuditQuery {
	mods = append(mods, qm.From("\"films_audit\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"films_audit\".*"})
	}

	return filmsAuditQuery{q}
}

// FindFilmsAudit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFilmsAudit(ctx context.Context, exec boil.ContextExecutor, iD int, contributedBy int, contributedAt time.Time, selectCols ...string) (*FilmsAudit, error) {
	filmsAuditObj := &FilmsAudit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"films_audit\" where \"id\"=$1 AND \"contributed_by\"=$2 AND \"contributed_at\"=$3", sel,
	)

	q := queries.Raw(query, iD, contributedBy, contributedAt)

	err := q.Bind(ctx, exec, filmsAuditObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from films_audit")
	}

	if err = filmsAuditObj.doAfterSelectHooks(ctx, exec); err != nil {
		return filmsAuditObj, err
	}

	return filmsAuditObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FilmsAudit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no films_audit provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmsAuditColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	filmsAuditInsertCacheMut.RLock()
	cache, cached := filmsAuditInsertCache[key]
	filmsAuditInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			filmsAuditAllColumns,
			filmsAuditColumnsWithDefault,
			filmsAuditColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(filmsAuditType, filmsAuditMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(filmsAuditType, filmsAuditMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"films_audit\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"films_audit\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into films_audit")
	}

	if !cached {
		filmsAuditInsertCacheMut.Lock()
		filmsAuditInsertCache[key] = cache
		filmsAuditInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the FilmsAudit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FilmsAudit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	filmsAuditUpdateCacheMut.RLock()
	cache, cached := filmsAuditUpdateCache[key]
	filmsAuditUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			filmsAuditAllColumns,
			filmsAuditPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update films_audit, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"films_audit\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, filmsAuditPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(filmsAuditType, filmsAuditMapping, append(wl, filmsAuditPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update films_audit row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for films_audit")
	}

	if !cached {
		filmsAuditUpdateCacheMut.Lock()
		filmsAuditUpdateCache[key] = cache
		filmsAuditUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q filmsAuditQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for films_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for films_audit")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FilmsAuditSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmsAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"films_audit\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, filmsAuditPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in filmsAudit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all filmsAudit")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FilmsAudit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no films_audit provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(filmsAuditColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	filmsAuditUpsertCacheMut.RLock()
	cache, cached := filmsAuditUpsertCache[key]
	filmsAuditUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			filmsAuditAllColumns,
			filmsAuditColumnsWithDefault,
			filmsAuditColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			filmsAuditAllColumns,
			filmsAuditPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert films_audit, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(filmsAuditPrimaryKeyColumns))
			copy(conflict, filmsAuditPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"films_audit\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(filmsAuditType, filmsAuditMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(filmsAuditType, filmsAuditMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert films_audit")
	}

	if !cached {
		filmsAuditUpsertCacheMut.Lock()
		filmsAuditUpsertCache[key] = cache
		filmsAuditUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single FilmsAudit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FilmsAudit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no FilmsAudit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), filmsAuditPrimaryKeyMapping)
	sql := "DELETE FROM \"films_audit\" WHERE \"id\"=$1 AND \"contributed_by\"=$2 AND \"contributed_at\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from films_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for films_audit")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q filmsAuditQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no filmsAuditQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from films_audit")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for films_audit")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FilmsAuditSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(filmsAuditBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmsAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"films_audit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, filmsAuditPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from filmsAudit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for films_audit")
	}

	if len(filmsAuditAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FilmsAudit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFilmsAudit(ctx, exec, o.ID, o.ContributedBy, o.ContributedAt)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FilmsAuditSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FilmsAuditSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), filmsAuditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"films_audit\".* FROM \"films_audit\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, filmsAuditPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FilmsAuditSlice")
	}

	*o = slice

	return nil
}

// FilmsAuditExists checks if the FilmsAudit row exists.
func FilmsAuditExists(ctx context.Context, exec boil.ContextExecutor, iD int, contributedBy int, contributedAt time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"films_audit\" where \"id\"=$1 AND \"contributed_by\"=$2 AND \"contributed_at\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD, contributedBy, contributedAt)
	}
	row := exec.QueryRowContext(ctx, sql, iD, contributedBy, contributedAt)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if films_audit exists")
	}

	return exists, nil
}
