// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Series is an object representing the database table.
type Series struct {
	ID            int         `db:"id" boil:"id" json:"id" toml:"id" yaml:"id"`
	Title         string      `db:"title" boil:"title" json:"title" toml:"title" yaml:"title"`
	Descriptions  null.String `db:"descriptions" boil:"descriptions" json:"descriptions,omitempty" toml:"descriptions" yaml:"descriptions,omitempty"`
	DateStarted   time.Time   `db:"date_started" boil:"date_started" json:"date_started" toml:"date_started" yaml:"date_started"`
	DateEnded     null.Time   `db:"date_ended" boil:"date_ended" json:"date_ended,omitempty" toml:"date_ended" yaml:"date_ended,omitempty"`
	Poster        null.String `db:"poster" boil:"poster" json:"poster,omitempty" toml:"poster" yaml:"poster,omitempty"`
	ContributedBy int         `db:"contributed_by" boil:"contributed_by" json:"contributed_by" toml:"contributed_by" yaml:"contributed_by"`
	ContributedAt time.Time   `db:"contributed_at" boil:"contributed_at" json:"contributed_at" toml:"contributed_at" yaml:"contributed_at"`
	Invalidation  null.String `db:"invalidation" boil:"invalidation" json:"invalidation,omitempty" toml:"invalidation" yaml:"invalidation,omitempty"`

	R *seriesR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L seriesL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SeriesColumns = struct {
	ID            string
	Title         string
	Descriptions  string
	DateStarted   string
	DateEnded     string
	Poster        string
	ContributedBy string
	ContributedAt string
	Invalidation  string
}{
	ID:            "id",
	Title:         "title",
	Descriptions:  "descriptions",
	DateStarted:   "date_started",
	DateEnded:     "date_ended",
	Poster:        "poster",
	ContributedBy: "contributed_by",
	ContributedAt: "contributed_at",
	Invalidation:  "invalidation",
}

var SeriesTableColumns = struct {
	ID            string
	Title         string
	Descriptions  string
	DateStarted   string
	DateEnded     string
	Poster        string
	ContributedBy string
	ContributedAt string
	Invalidation  string
}{
	ID:            "serieses.id",
	Title:         "serieses.title",
	Descriptions:  "serieses.descriptions",
	DateStarted:   "serieses.date_started",
	DateEnded:     "serieses.date_ended",
	Poster:        "serieses.poster",
	ContributedBy: "serieses.contributed_by",
	ContributedAt: "serieses.contributed_at",
	Invalidation:  "serieses.invalidation",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var SeriesWhere = struct {
	ID            whereHelperint
	Title         whereHelperstring
	Descriptions  whereHelpernull_String
	DateStarted   whereHelpertime_Time
	DateEnded     whereHelpernull_Time
	Poster        whereHelpernull_String
	ContributedBy whereHelperint
	ContributedAt whereHelpertime_Time
	Invalidation  whereHelpernull_String
}{
	ID:            whereHelperint{field: "\"serieses\".\"id\""},
	Title:         whereHelperstring{field: "\"serieses\".\"title\""},
	Descriptions:  whereHelpernull_String{field: "\"serieses\".\"descriptions\""},
	DateStarted:   whereHelpertime_Time{field: "\"serieses\".\"date_started\""},
	DateEnded:     whereHelpernull_Time{field: "\"serieses\".\"date_ended\""},
	Poster:        whereHelpernull_String{field: "\"serieses\".\"poster\""},
	ContributedBy: whereHelperint{field: "\"serieses\".\"contributed_by\""},
	ContributedAt: whereHelpertime_Time{field: "\"serieses\".\"contributed_at\""},
	Invalidation:  whereHelpernull_String{field: "\"serieses\".\"invalidation\""},
}

// SeriesRels is where relationship names are stored.
var SeriesRels = struct {
	ContributingUser string
	SeriesFilms      string
}{
	ContributingUser: "ContributingUser",
	SeriesFilms:      "SeriesFilms",
}

// seriesR is where relationships are stored.
type seriesR struct {
	ContributingUser *User     `db:"ContributingUser" boil:"ContributingUser" json:"ContributingUser" toml:"ContributingUser" yaml:"ContributingUser"`
	SeriesFilms      FilmSlice `db:"SeriesFilms" boil:"SeriesFilms" json:"SeriesFilms" toml:"SeriesFilms" yaml:"SeriesFilms"`
}

// NewStruct creates a new relationship struct
func (*seriesR) NewStruct() *seriesR {
	return &seriesR{}
}

func (r *seriesR) GetContributingUser() *User {
	if r == nil {
		return nil
	}
	return r.ContributingUser
}

func (r *seriesR) GetSeriesFilms() FilmSlice {
	if r == nil {
		return nil
	}
	return r.SeriesFilms
}

// seriesL is where Load methods for each relationship are stored.
type seriesL struct{}

var (
	seriesAllColumns            = []string{"id", "title", "descriptions", "date_started", "date_ended", "poster", "contributed_by", "contributed_at", "invalidation"}
	seriesColumnsWithoutDefault = []string{"title", "date_started", "contributed_by"}
	seriesColumnsWithDefault    = []string{"id", "descriptions", "date_ended", "poster", "contributed_at", "invalidation"}
	seriesPrimaryKeyColumns     = []string{"id"}
	seriesGeneratedColumns      = []string{}
)

type (
	// SeriesSlice is an alias for a slice of pointers to Series.
	// This should almost always be used instead of []Series.
	SeriesSlice []*Series
	// SeriesHook is the signature for custom Series hook methods
	SeriesHook func(context.Context, boil.ContextExecutor, *Series) error

	seriesQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	seriesType                 = reflect.TypeOf(&Series{})
	seriesMapping              = queries.MakeStructMapping(seriesType)
	seriesPrimaryKeyMapping, _ = queries.BindMapping(seriesType, seriesMapping, seriesPrimaryKeyColumns)
	seriesInsertCacheMut       sync.RWMutex
	seriesInsertCache          = make(map[string]insertCache)
	seriesUpdateCacheMut       sync.RWMutex
	seriesUpdateCache          = make(map[string]updateCache)
	seriesUpsertCacheMut       sync.RWMutex
	seriesUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var seriesAfterSelectHooks []SeriesHook

var seriesBeforeInsertHooks []SeriesHook
var seriesAfterInsertHooks []SeriesHook

var seriesBeforeUpdateHooks []SeriesHook
var seriesAfterUpdateHooks []SeriesHook

var seriesBeforeDeleteHooks []SeriesHook
var seriesAfterDeleteHooks []SeriesHook

var seriesBeforeUpsertHooks []SeriesHook
var seriesAfterUpsertHooks []SeriesHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Series) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seriesAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Series) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seriesBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Series) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seriesAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Series) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seriesBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Series) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seriesAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Series) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seriesBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Series) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seriesAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Series) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seriesBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Series) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range seriesAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSeriesHook registers your hook function for all future operations.
func AddSeriesHook(hookPoint boil.HookPoint, seriesHook SeriesHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		seriesAfterSelectHooks = append(seriesAfterSelectHooks, seriesHook)
	case boil.BeforeInsertHook:
		seriesBeforeInsertHooks = append(seriesBeforeInsertHooks, seriesHook)
	case boil.AfterInsertHook:
		seriesAfterInsertHooks = append(seriesAfterInsertHooks, seriesHook)
	case boil.BeforeUpdateHook:
		seriesBeforeUpdateHooks = append(seriesBeforeUpdateHooks, seriesHook)
	case boil.AfterUpdateHook:
		seriesAfterUpdateHooks = append(seriesAfterUpdateHooks, seriesHook)
	case boil.BeforeDeleteHook:
		seriesBeforeDeleteHooks = append(seriesBeforeDeleteHooks, seriesHook)
	case boil.AfterDeleteHook:
		seriesAfterDeleteHooks = append(seriesAfterDeleteHooks, seriesHook)
	case boil.BeforeUpsertHook:
		seriesBeforeUpsertHooks = append(seriesBeforeUpsertHooks, seriesHook)
	case boil.AfterUpsertHook:
		seriesAfterUpsertHooks = append(seriesAfterUpsertHooks, seriesHook)
	}
}

// One returns a single series record from the query.
func (q seriesQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Series, error) {
	o := &Series{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for serieses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Series records from the query.
func (q seriesQuery) All(ctx context.Context, exec boil.ContextExecutor) (SeriesSlice, error) {
	var o []*Series

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Series slice")
	}

	if len(seriesAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Series records in the query.
func (q seriesQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count serieses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q seriesQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if serieses exists")
	}

	return count > 0, nil
}

// ContributingUser pointed to by the foreign key.
func (o *Series) ContributingUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContributedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// SeriesFilms retrieves all the film's Films with an executor via series_id column.
func (o *Series) SeriesFilms(mods ...qm.QueryMod) filmQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"films\".\"series_id\"=?", o.ID),
	)

	return Films(queryMods...)
}

// LoadContributingUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (seriesL) LoadContributingUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeries interface{}, mods queries.Applicator) error {
	var slice []*Series
	var object *Series

	if singular {
		var ok bool
		object, ok = maybeSeries.(*Series)
		if !ok {
			object = new(Series)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeries)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeries))
			}
		}
	} else {
		s, ok := maybeSeries.(*[]*Series)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeries)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeries))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seriesR{}
		}
		args = append(args, object.ContributedBy)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seriesR{}
			}

			for _, a := range args {
				if a == obj.ContributedBy {
					continue Outer
				}
			}

			args = append(args, obj.ContributedBy)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(seriesAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContributingUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ContributedSerieses = append(foreign.R.ContributedSerieses, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContributedBy == foreign.ID {
				local.R.ContributingUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ContributedSerieses = append(foreign.R.ContributedSerieses, local)
				break
			}
		}
	}

	return nil
}

// LoadSeriesFilms allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (seriesL) LoadSeriesFilms(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSeries interface{}, mods queries.Applicator) error {
	var slice []*Series
	var object *Series

	if singular {
		var ok bool
		object, ok = maybeSeries.(*Series)
		if !ok {
			object = new(Series)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSeries)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSeries))
			}
		}
	} else {
		s, ok := maybeSeries.(*[]*Series)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSeries)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSeries))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &seriesR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &seriesR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`films`),
		qm.WhereIn(`films.series_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load films")
	}

	var resultSlice []*Film
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice films")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on films")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for films")
	}

	if len(filmAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SeriesFilms = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &filmR{}
			}
			foreign.R.Series = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SeriesID) {
				local.R.SeriesFilms = append(local.R.SeriesFilms, foreign)
				if foreign.R == nil {
					foreign.R = &filmR{}
				}
				foreign.R.Series = local
				break
			}
		}
	}

	return nil
}

// SetContributingUser of the series to the related item.
// Sets o.R.ContributingUser to related.
// Adds o to related.R.ContributedSerieses.
func (o *Series) SetContributingUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"serieses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"contributed_by"}),
		strmangle.WhereClause("\"", "\"", 2, seriesPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContributedBy = related.ID
	if o.R == nil {
		o.R = &seriesR{
			ContributingUser: related,
		}
	} else {
		o.R.ContributingUser = related
	}

	if related.R == nil {
		related.R = &userR{
			ContributedSerieses: SeriesSlice{o},
		}
	} else {
		related.R.ContributedSerieses = append(related.R.ContributedSerieses, o)
	}

	return nil
}

// AddSeriesFilms adds the given related objects to the existing relationships
// of the seriese, optionally inserting them as new records.
// Appends related to o.R.SeriesFilms.
// Sets related.R.Series appropriately.
func (o *Series) AddSeriesFilms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Film) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SeriesID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"films\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"series_id"}),
				strmangle.WhereClause("\"", "\"", 2, filmPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SeriesID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &seriesR{
			SeriesFilms: related,
		}
	} else {
		o.R.SeriesFilms = append(o.R.SeriesFilms, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &filmR{
				Series: o,
			}
		} else {
			rel.R.Series = o
		}
	}
	return nil
}

// SetSeriesFilms removes all previously related items of the
// seriese replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Series's SeriesFilms accordingly.
// Replaces o.R.SeriesFilms with related.
// Sets related.R.Series's SeriesFilms accordingly.
func (o *Series) SetSeriesFilms(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Film) error {
	query := "update \"films\" set \"series_id\" = null where \"series_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SeriesFilms {
			queries.SetScanner(&rel.SeriesID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Series = nil
		}
		o.R.SeriesFilms = nil
	}

	return o.AddSeriesFilms(ctx, exec, insert, related...)
}

// RemoveSeriesFilms relationships from objects passed in.
// Removes related items from R.SeriesFilms (uses pointer comparison, removal does not keep order)
// Sets related.R.Series.
func (o *Series) RemoveSeriesFilms(ctx context.Context, exec boil.ContextExecutor, related ...*Film) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SeriesID, nil)
		if rel.R != nil {
			rel.R.Series = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("series_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SeriesFilms {
			if rel != ri {
				continue
			}

			ln := len(o.R.SeriesFilms)
			if ln > 1 && i < ln-1 {
				o.R.SeriesFilms[i] = o.R.SeriesFilms[ln-1]
			}
			o.R.SeriesFilms = o.R.SeriesFilms[:ln-1]
			break
		}
	}

	return nil
}

// Serieses retrieves all the records using an executor.
func Serieses(mods ...qm.QueryMod) seriesQuery {
	mods = append(mods, qm.From("\"serieses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"serieses\".*"})
	}

	return seriesQuery{q}
}

// FindSeries retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSeries(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Series, error) {
	seriesObj := &Series{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"serieses\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, seriesObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from serieses")
	}

	if err = seriesObj.doAfterSelectHooks(ctx, exec); err != nil {
		return seriesObj, err
	}

	return seriesObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Series) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no serieses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seriesColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	seriesInsertCacheMut.RLock()
	cache, cached := seriesInsertCache[key]
	seriesInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			seriesAllColumns,
			seriesColumnsWithDefault,
			seriesColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(seriesType, seriesMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(seriesType, seriesMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"serieses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"serieses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into serieses")
	}

	if !cached {
		seriesInsertCacheMut.Lock()
		seriesInsertCache[key] = cache
		seriesInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Series.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Series) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	seriesUpdateCacheMut.RLock()
	cache, cached := seriesUpdateCache[key]
	seriesUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			seriesAllColumns,
			seriesPrimaryKeyColumns,
		)
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update serieses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"serieses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, seriesPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(seriesType, seriesMapping, append(wl, seriesPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update serieses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for serieses")
	}

	if !cached {
		seriesUpdateCacheMut.Lock()
		seriesUpdateCache[key] = cache
		seriesUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q seriesQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for serieses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for serieses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SeriesSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seriesPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"serieses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, seriesPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in series slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all series")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Series) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no serieses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(seriesColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	seriesUpsertCacheMut.RLock()
	cache, cached := seriesUpsertCache[key]
	seriesUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			seriesAllColumns,
			seriesColumnsWithDefault,
			seriesColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			seriesAllColumns,
			seriesPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert serieses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(seriesPrimaryKeyColumns))
			copy(conflict, seriesPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"serieses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(seriesType, seriesMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(seriesType, seriesMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert serieses")
	}

	if !cached {
		seriesUpsertCacheMut.Lock()
		seriesUpsertCache[key] = cache
		seriesUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Series record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Series) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Series provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), seriesPrimaryKeyMapping)
	sql := "DELETE FROM \"serieses\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from serieses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for serieses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q seriesQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no seriesQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from serieses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for serieses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SeriesSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(seriesBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seriesPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"serieses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seriesPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from series slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for serieses")
	}

	if len(seriesAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Series) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSeries(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SeriesSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SeriesSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), seriesPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"serieses\".* FROM \"serieses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, seriesPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SeriesSlice")
	}

	*o = slice

	return nil
}

// SeriesExists checks if the Series row exists.
func SeriesExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"serieses\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if serieses exists")
	}

	return exists, nil
}
