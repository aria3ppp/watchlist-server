// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWatchfilms(t *testing.T) {
	t.Parallel()

	query := Watchfilms()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWatchfilmsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Watchfilms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWatchfilmsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Watchfilms().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Watchfilms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWatchfilmsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WatchfilmSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Watchfilms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWatchfilmsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WatchfilmExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Watchfilm exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WatchfilmExists to return true, but got false.")
	}
}

func testWatchfilmsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	watchfilmFound, err := FindWatchfilm(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if watchfilmFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWatchfilmsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Watchfilms().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWatchfilmsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Watchfilms().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWatchfilmsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	watchfilmOne := &Watchfilm{}
	watchfilmTwo := &Watchfilm{}
	if err = randomize.Struct(seed, watchfilmOne, watchfilmDBTypes, false, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}
	if err = randomize.Struct(seed, watchfilmTwo, watchfilmDBTypes, false, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = watchfilmOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = watchfilmTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Watchfilms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWatchfilmsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	watchfilmOne := &Watchfilm{}
	watchfilmTwo := &Watchfilm{}
	if err = randomize.Struct(seed, watchfilmOne, watchfilmDBTypes, false, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}
	if err = randomize.Struct(seed, watchfilmTwo, watchfilmDBTypes, false, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = watchfilmOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = watchfilmTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Watchfilms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func watchfilmBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Watchfilm) error {
	*o = Watchfilm{}
	return nil
}

func watchfilmAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Watchfilm) error {
	*o = Watchfilm{}
	return nil
}

func watchfilmAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Watchfilm) error {
	*o = Watchfilm{}
	return nil
}

func watchfilmBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Watchfilm) error {
	*o = Watchfilm{}
	return nil
}

func watchfilmAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Watchfilm) error {
	*o = Watchfilm{}
	return nil
}

func watchfilmBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Watchfilm) error {
	*o = Watchfilm{}
	return nil
}

func watchfilmAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Watchfilm) error {
	*o = Watchfilm{}
	return nil
}

func watchfilmBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Watchfilm) error {
	*o = Watchfilm{}
	return nil
}

func watchfilmAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Watchfilm) error {
	*o = Watchfilm{}
	return nil
}

func testWatchfilmsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Watchfilm{}
	o := &Watchfilm{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, watchfilmDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Watchfilm object: %s", err)
	}

	AddWatchfilmHook(boil.BeforeInsertHook, watchfilmBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	watchfilmBeforeInsertHooks = []WatchfilmHook{}

	AddWatchfilmHook(boil.AfterInsertHook, watchfilmAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	watchfilmAfterInsertHooks = []WatchfilmHook{}

	AddWatchfilmHook(boil.AfterSelectHook, watchfilmAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	watchfilmAfterSelectHooks = []WatchfilmHook{}

	AddWatchfilmHook(boil.BeforeUpdateHook, watchfilmBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	watchfilmBeforeUpdateHooks = []WatchfilmHook{}

	AddWatchfilmHook(boil.AfterUpdateHook, watchfilmAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	watchfilmAfterUpdateHooks = []WatchfilmHook{}

	AddWatchfilmHook(boil.BeforeDeleteHook, watchfilmBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	watchfilmBeforeDeleteHooks = []WatchfilmHook{}

	AddWatchfilmHook(boil.AfterDeleteHook, watchfilmAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	watchfilmAfterDeleteHooks = []WatchfilmHook{}

	AddWatchfilmHook(boil.BeforeUpsertHook, watchfilmBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	watchfilmBeforeUpsertHooks = []WatchfilmHook{}

	AddWatchfilmHook(boil.AfterUpsertHook, watchfilmAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	watchfilmAfterUpsertHooks = []WatchfilmHook{}
}

func testWatchfilmsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Watchfilms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWatchfilmsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(watchfilmColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Watchfilms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWatchfilmToOneFilmUsingFilm(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Watchfilm
	var foreign Film

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, watchfilmDBTypes, false, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, filmDBTypes, false, filmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Film struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.FilmID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Film().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WatchfilmSlice{&local}
	if err = local.L.LoadFilm(ctx, tx, false, (*[]*Watchfilm)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Film = nil
	if err = local.L.LoadFilm(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Film == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWatchfilmToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Watchfilm
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, watchfilmDBTypes, false, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WatchfilmSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*Watchfilm)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWatchfilmToOneSetOpFilmUsingFilm(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Watchfilm
	var b, c Film

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, watchfilmDBTypes, false, strmangle.SetComplement(watchfilmPrimaryKeyColumns, watchfilmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, filmDBTypes, false, strmangle.SetComplement(filmPrimaryKeyColumns, filmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Film{&b, &c} {
		err = a.SetFilm(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Film != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Watchfilms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.FilmID != x.ID {
			t.Error("foreign key was wrong value", a.FilmID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FilmID))
		reflect.Indirect(reflect.ValueOf(&a.FilmID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.FilmID != x.ID {
			t.Error("foreign key was wrong value", a.FilmID, x.ID)
		}
	}
}
func testWatchfilmToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Watchfilm
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, watchfilmDBTypes, false, strmangle.SetComplement(watchfilmPrimaryKeyColumns, watchfilmColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Watchfilms[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testWatchfilmsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWatchfilmsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WatchfilmSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWatchfilmsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Watchfilms().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	watchfilmDBTypes = map[string]string{`ID`: `integer`, `UserID`: `integer`, `FilmID`: `integer`, `TimeAdded`: `timestamp with time zone`, `TimeWatched`: `timestamp with time zone`}
	_                = bytes.MinRead
)

func testWatchfilmsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(watchfilmPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(watchfilmAllColumns) == len(watchfilmPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Watchfilms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWatchfilmsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(watchfilmAllColumns) == len(watchfilmPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Watchfilm{}
	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Watchfilms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, watchfilmDBTypes, true, watchfilmPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(watchfilmAllColumns, watchfilmPrimaryKeyColumns) {
		fields = watchfilmAllColumns
	} else {
		fields = strmangle.SetComplement(
			watchfilmAllColumns,
			watchfilmPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WatchfilmSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWatchfilmsUpsert(t *testing.T) {
	t.Parallel()

	if len(watchfilmAllColumns) == len(watchfilmPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Watchfilm{}
	if err = randomize.Struct(seed, &o, watchfilmDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Watchfilm: %s", err)
	}

	count, err := Watchfilms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, watchfilmDBTypes, false, watchfilmPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Watchfilm struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Watchfilm: %s", err)
	}

	count, err = Watchfilms().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
