// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Films", testFilms)
	t.Run("FilmsAudits", testFilmsAudits)
	t.Run("Serieses", testSerieses)
	t.Run("SeriesesAudits", testSeriesesAudits)
	t.Run("Tokens", testTokens)
	t.Run("Users", testUsers)
	t.Run("Watchfilms", testWatchfilms)
}

func TestDelete(t *testing.T) {
	t.Run("Films", testFilmsDelete)
	t.Run("FilmsAudits", testFilmsAuditsDelete)
	t.Run("Serieses", testSeriesesDelete)
	t.Run("SeriesesAudits", testSeriesesAuditsDelete)
	t.Run("Tokens", testTokensDelete)
	t.Run("Users", testUsersDelete)
	t.Run("Watchfilms", testWatchfilmsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Films", testFilmsQueryDeleteAll)
	t.Run("FilmsAudits", testFilmsAuditsQueryDeleteAll)
	t.Run("Serieses", testSeriesesQueryDeleteAll)
	t.Run("SeriesesAudits", testSeriesesAuditsQueryDeleteAll)
	t.Run("Tokens", testTokensQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("Watchfilms", testWatchfilmsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Films", testFilmsSliceDeleteAll)
	t.Run("FilmsAudits", testFilmsAuditsSliceDeleteAll)
	t.Run("Serieses", testSeriesesSliceDeleteAll)
	t.Run("SeriesesAudits", testSeriesesAuditsSliceDeleteAll)
	t.Run("Tokens", testTokensSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("Watchfilms", testWatchfilmsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Films", testFilmsExists)
	t.Run("FilmsAudits", testFilmsAuditsExists)
	t.Run("Serieses", testSeriesesExists)
	t.Run("SeriesesAudits", testSeriesesAuditsExists)
	t.Run("Tokens", testTokensExists)
	t.Run("Users", testUsersExists)
	t.Run("Watchfilms", testWatchfilmsExists)
}

func TestFind(t *testing.T) {
	t.Run("Films", testFilmsFind)
	t.Run("FilmsAudits", testFilmsAuditsFind)
	t.Run("Serieses", testSeriesesFind)
	t.Run("SeriesesAudits", testSeriesesAuditsFind)
	t.Run("Tokens", testTokensFind)
	t.Run("Users", testUsersFind)
	t.Run("Watchfilms", testWatchfilmsFind)
}

func TestBind(t *testing.T) {
	t.Run("Films", testFilmsBind)
	t.Run("FilmsAudits", testFilmsAuditsBind)
	t.Run("Serieses", testSeriesesBind)
	t.Run("SeriesesAudits", testSeriesesAuditsBind)
	t.Run("Tokens", testTokensBind)
	t.Run("Users", testUsersBind)
	t.Run("Watchfilms", testWatchfilmsBind)
}

func TestOne(t *testing.T) {
	t.Run("Films", testFilmsOne)
	t.Run("FilmsAudits", testFilmsAuditsOne)
	t.Run("Serieses", testSeriesesOne)
	t.Run("SeriesesAudits", testSeriesesAuditsOne)
	t.Run("Tokens", testTokensOne)
	t.Run("Users", testUsersOne)
	t.Run("Watchfilms", testWatchfilmsOne)
}

func TestAll(t *testing.T) {
	t.Run("Films", testFilmsAll)
	t.Run("FilmsAudits", testFilmsAuditsAll)
	t.Run("Serieses", testSeriesesAll)
	t.Run("SeriesesAudits", testSeriesesAuditsAll)
	t.Run("Tokens", testTokensAll)
	t.Run("Users", testUsersAll)
	t.Run("Watchfilms", testWatchfilmsAll)
}

func TestCount(t *testing.T) {
	t.Run("Films", testFilmsCount)
	t.Run("FilmsAudits", testFilmsAuditsCount)
	t.Run("Serieses", testSeriesesCount)
	t.Run("SeriesesAudits", testSeriesesAuditsCount)
	t.Run("Tokens", testTokensCount)
	t.Run("Users", testUsersCount)
	t.Run("Watchfilms", testWatchfilmsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Films", testFilmsHooks)
	t.Run("FilmsAudits", testFilmsAuditsHooks)
	t.Run("Serieses", testSeriesesHooks)
	t.Run("SeriesesAudits", testSeriesesAuditsHooks)
	t.Run("Tokens", testTokensHooks)
	t.Run("Users", testUsersHooks)
	t.Run("Watchfilms", testWatchfilmsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Films", testFilmsInsert)
	t.Run("Films", testFilmsInsertWhitelist)
	t.Run("FilmsAudits", testFilmsAuditsInsert)
	t.Run("FilmsAudits", testFilmsAuditsInsertWhitelist)
	t.Run("Serieses", testSeriesesInsert)
	t.Run("Serieses", testSeriesesInsertWhitelist)
	t.Run("SeriesesAudits", testSeriesesAuditsInsert)
	t.Run("SeriesesAudits", testSeriesesAuditsInsertWhitelist)
	t.Run("Tokens", testTokensInsert)
	t.Run("Tokens", testTokensInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("Watchfilms", testWatchfilmsInsert)
	t.Run("Watchfilms", testWatchfilmsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("FilmToUserUsingContributingUser", testFilmToOneUserUsingContributingUser)
	t.Run("FilmToSeriesUsingSeries", testFilmToOneSeriesUsingSeries)
	t.Run("SeriesToUserUsingContributingUser", testSeriesToOneUserUsingContributingUser)
	t.Run("TokenToUserUsingUser", testTokenToOneUserUsingUser)
	t.Run("WatchfilmToFilmUsingFilm", testWatchfilmToOneFilmUsingFilm)
	t.Run("WatchfilmToUserUsingUser", testWatchfilmToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("FilmToWatchfilms", testFilmToManyWatchfilms)
	t.Run("SeriesToSeriesFilms", testSeriesToManySeriesFilms)
	t.Run("UserToContributedFilms", testUserToManyContributedFilms)
	t.Run("UserToContributedSerieses", testUserToManyContributedSerieses)
	t.Run("UserToTokens", testUserToManyTokens)
	t.Run("UserToWatchfilms", testUserToManyWatchfilms)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("FilmToUserUsingContributedFilms", testFilmToOneSetOpUserUsingContributingUser)
	t.Run("FilmToSeriesUsingSeriesFilms", testFilmToOneSetOpSeriesUsingSeries)
	t.Run("SeriesToUserUsingContributedSerieses", testSeriesToOneSetOpUserUsingContributingUser)
	t.Run("TokenToUserUsingTokens", testTokenToOneSetOpUserUsingUser)
	t.Run("WatchfilmToFilmUsingWatchfilms", testWatchfilmToOneSetOpFilmUsingFilm)
	t.Run("WatchfilmToUserUsingWatchfilms", testWatchfilmToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("FilmToSeriesUsingSeriesFilms", testFilmToOneRemoveOpSeriesUsingSeries)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("FilmToWatchfilms", testFilmToManyAddOpWatchfilms)
	t.Run("SeriesToSeriesFilms", testSeriesToManyAddOpSeriesFilms)
	t.Run("UserToContributedFilms", testUserToManyAddOpContributedFilms)
	t.Run("UserToContributedSerieses", testUserToManyAddOpContributedSerieses)
	t.Run("UserToTokens", testUserToManyAddOpTokens)
	t.Run("UserToWatchfilms", testUserToManyAddOpWatchfilms)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("SeriesToSeriesFilms", testSeriesToManySetOpSeriesFilms)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("SeriesToSeriesFilms", testSeriesToManyRemoveOpSeriesFilms)
}

func TestReload(t *testing.T) {
	t.Run("Films", testFilmsReload)
	t.Run("FilmsAudits", testFilmsAuditsReload)
	t.Run("Serieses", testSeriesesReload)
	t.Run("SeriesesAudits", testSeriesesAuditsReload)
	t.Run("Tokens", testTokensReload)
	t.Run("Users", testUsersReload)
	t.Run("Watchfilms", testWatchfilmsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Films", testFilmsReloadAll)
	t.Run("FilmsAudits", testFilmsAuditsReloadAll)
	t.Run("Serieses", testSeriesesReloadAll)
	t.Run("SeriesesAudits", testSeriesesAuditsReloadAll)
	t.Run("Tokens", testTokensReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("Watchfilms", testWatchfilmsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Films", testFilmsSelect)
	t.Run("FilmsAudits", testFilmsAuditsSelect)
	t.Run("Serieses", testSeriesesSelect)
	t.Run("SeriesesAudits", testSeriesesAuditsSelect)
	t.Run("Tokens", testTokensSelect)
	t.Run("Users", testUsersSelect)
	t.Run("Watchfilms", testWatchfilmsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Films", testFilmsUpdate)
	t.Run("FilmsAudits", testFilmsAuditsUpdate)
	t.Run("Serieses", testSeriesesUpdate)
	t.Run("SeriesesAudits", testSeriesesAuditsUpdate)
	t.Run("Tokens", testTokensUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("Watchfilms", testWatchfilmsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Films", testFilmsSliceUpdateAll)
	t.Run("FilmsAudits", testFilmsAuditsSliceUpdateAll)
	t.Run("Serieses", testSeriesesSliceUpdateAll)
	t.Run("SeriesesAudits", testSeriesesAuditsSliceUpdateAll)
	t.Run("Tokens", testTokensSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("Watchfilms", testWatchfilmsSliceUpdateAll)
}
